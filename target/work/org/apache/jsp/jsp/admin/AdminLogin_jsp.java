/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.4
 * Generated at: 2022-12-07 13:44:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class AdminLogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/jsp/admin/AdminFooter.jsp", Long.valueOf(1670420679439L));
    _jspx_dependants.put("/jsp/admin/TourCheck.jsp", Long.valueOf(1670420679447L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"ErrorPage.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "AdminHeaderSessionLess.jsp", out, false);
      out.write('\r');
      out.write('\n');
      fr.paris.lutece.portal.web.user.AdminLoginJspBean login = null;
      login = (fr.paris.lutece.portal.web.user.AdminLoginJspBean) _jspx_page_context.getAttribute("login", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (login == null){
        login = new fr.paris.lutece.portal.web.user.AdminLoginJspBean();
        _jspx_page_context.setAttribute("login", login, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      out.print( login.getLogin( request, response ) );
      out.write('\r');
      out.write('\n');
      fr.paris.lutece.portal.web.admin.AdminMenuJspBean adminFooter = null;
      adminFooter = (fr.paris.lutece.portal.web.admin.AdminMenuJspBean) _jspx_page_context.getAttribute("adminFooter", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (adminFooter == null){
        adminFooter = new fr.paris.lutece.portal.web.admin.AdminMenuJspBean();
        _jspx_page_context.setAttribute("adminFooter", adminFooter, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.print( adminFooter.getAdminMenuFooter( request ) );
      out.write("\r\n");
      out.write("\r\n");
 
	String _jspName = this.getClass().getSimpleName().replaceAll("_", "."); //current jsp filename

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"relaunch-tour-div\" style=\"position:fixed; bottom:20px; right:20px;\">\r\n");
      out.write("<image id=\"relaunch-tour\" src=\"js/shepherd/relaunch_en.png\" width=\"100\" height=\"100\">\r\n");
      out.write("</image>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("let jspFile = \"");
      out.print( _jspName);
      out.write("\";\r\n");
      out.write("let jsonFile = jspFile.split(\".\")[0] + \".json\";\r\n");
      out.write("$(\"#relaunch-tour\").hide();\r\n");
      out.write("\r\n");
      out.write("launchTour(false);\r\n");
      out.write("\r\n");
      out.write("document.getElementById(\"relaunch-tour\").onclick = function(e) {\r\n");
      out.write("    launchTour(true);\r\n");
      out.write("    return true;\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("function launchTour(relaunch) {\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t$.getJSON(\"js/shepherd/tours/\" + jsonFile)\r\n");
      out.write("\t.success(function(json) {\r\n");
      out.write("\t\t$(\"#relaunch-tour\").show();\r\n");
      out.write("\t\tif (!relaunch) {\r\n");
      out.write("\t\t\tconsole.log(document.cookie.match(/^(.*;)?\\s*tourCompleted\\s*=\\s*[^;]+(.*)?$/));\r\n");
      out.write("\t\t\tvar match = document.cookie.match(/^(.*;)?\\s*tourCompleted\\s*=\\s*[^;]+(.*)?$/);\r\n");
      out.write("\t\t\tif (match == -1 || match == null) {\r\n");
      out.write("\t\t\t\tdocument.cookie = \"tourCompleted=true;\";\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tconst tour = new Shepherd.Tour({\r\n");
      out.write("\t\t\t  useModalOverlay: true,\r\n");
      out.write("\t\t\t  defaultStepOptions: {\r\n");
      out.write("\t\t\t    classes: 'shadow-md bg-purple-dark',\r\n");
      out.write("\t\t\t    scrollTo: {\r\n");
      out.write("\t\t\t          behavior: 'smooth',\r\n");
      out.write("\t\t\t          block: 'center'\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor (let i in json.steps) {\r\n");
      out.write("\t\t\tif (\"buttons\" in json.steps[i]) {\r\n");
      out.write("\t\t\t\tfor (j in json.steps[i].buttons) {\r\n");
      out.write("\t\t\t\t\tif (\"action\" in json.steps[i].buttons[j]) {\r\n");
      out.write("\t\t\t\t\t\t//much more limited when importing from json file\r\n");
      out.write("\t\t\t\t\t\tif (json.steps[i].buttons[j].action == \"tour.next\") {\r\n");
      out.write("\t\t\t\t\t\t\tjson.steps[i].buttons[j].action = tour.next;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tif (json.steps[i].buttons[j].action == \"tour.back\") {\r\n");
      out.write("\t\t\t\t\t\t\tjson.steps[i].buttons[j].action = tour.back;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\ttour.addStep(json.steps[i]);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\ttour.start();\r\n");
      out.write("\t}).error(function(error){\r\n");
      out.write("\t\tconsole.log(error);\r\n");
      out.write("\t\t$(\"#relaunch-tour\").hide();\r\n");
      out.write("\t    //most likely no json file for this page, but print error\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
